(* Sample interactive calculator for ML-Yacc *)
datatype ArithExp =
  IConst of int |
  Add of ArithExp * ArithExp |
  Sub of ArithExp * ArithExp |
  Mul of ArithExp * ArithExp |
  Div of ArithExp * ArithExp

fun exp2string (IConst(i)) = "IConst(" ^ Int.toString(i) ^ ")"
  | exp2string (Add(x, y)) = "Add(" ^ exp2string(x) ^ ", " ^ exp2string(y) ^ ")"
  | exp2string (Sub(x, y)) = "Sub(" ^ exp2string(x) ^ ", " ^ exp2string(y) ^ ")"
  | exp2string (Mul(x, y)) = "Mul(" ^ exp2string(x) ^ ", " ^ exp2string(y) ^ ")"
  | exp2string (Div(x, y)) = "Div(" ^ exp2string(x) ^ ", " ^ exp2string(y) ^ ")"

%%

%name Calc

%pos int

%term NUM of int | 
      PLUS       |
      TIMES      |
      DIV        |
      MINUS      | 
      LPAR       |
      RPAR       |
      EOF
  
%nonterm Start of unit |
         Exp of ArithExp |
         Term of ArithExp |
         Fact of ArithExp

%eop EOF 

%%

Start : Exp              (print ("result = " ^ exp2string(Exp)^"\n" ))
  Exp : Exp PLUS Term    (Add(Exp, Term))
      | Exp MINUS Term   (Sub(Exp, Term))
      | Term 	         (Term)
  
 Term : Term TIMES Fact (Mul(Term, Fact))
      | Term DIV Fact   (Div(Term, Fact))
      | Fact		(Fact)
 
 Fact : NUM             (IConst(NUM))
      | LPAR Exp RPAR   (Exp)


